<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Emission;
use Application\Sonata\UserBundle\Entity\User;
/**
 * PassageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PassageRepository extends EntityRepository
{
    public function findAllLike($critere) {
        $qb = $this->_em->createQueryBuilder();
        return $query = $qb->select('p')
                ->from('AppBundle:Passage', 'p')
                ->innerJoin('p.emission', 'e')
                ->where($qb->expr()->orX(
                        $qb->expr()->like('p.keywords',':keywords'),
                        $qb->expr()->like('e.nom',':nom')
                       
                        ))
                
              
                ->setParameters(
                        array('keywords'=> '%' . $critere . '%',
                              'nom'=> '%' . $critere . '%'
                            )
                        )
              //  ->orderBy('p.datedujour', 'ASC')
                ->getQuery()
                ->getResult();
        
    }
    
    public function findLikeBy($critere) {
        $qb = $this->_em->createQueryBuilder();
        return $query = $qb->select('p')
                ->from('AppBundle:Passage', 'p')
                ->innerJoin('p.emission', 'e')
                ->innerJoin('p.journalist', 'j')
                ->where($qb->expr()->orX(
                        $qb->expr()->like('p.keywords',':keywords'),
                        $qb->expr()->like('e.nom',':nom'),
                         $qb->expr()->like('j.username',':username')
                        ))
                ->setParameters(
                        array('keywords'=> '%' . $critere . '%',
                              'nom'=> '%' . $critere . '%',
                               'username'=> '%' . $critere . '%'
                            )
                        )
                ->orderBy('p.dateDujour', 'ASC')
                ->getQuery()
                ->getResult();
        
    }
}
